// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: storage.capnp

#ifndef CAPNP_INCLUDED_e196d5513ec00f45_
#define CAPNP_INCLUDED_e196d5513ec00f45_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bad1c6cf3fb4c5be);
CAPNP_DECLARE_SCHEMA(8496c619c3ea84b5);
CAPNP_DECLARE_SCHEMA(d8670c870e430f32);

}  // namespace schemas
}  // namespace capnp


struct Copy {
  Copy() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bad1c6cf3fb4c5be, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Create {
  Create() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8496c619c3ea84b5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Patch {
  Patch() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8670c870e430f32, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Copy::Reader {
public:
  typedef Copy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getOrigin() const;

  inline  ::uint32_t getDest() const;

  inline  ::uint32_t getLength() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Copy::Builder {
public:
  typedef Copy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getOrigin();
  inline void setOrigin( ::uint32_t value);

  inline  ::uint32_t getDest();
  inline void setDest( ::uint32_t value);

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Copy::Pipeline {
public:
  typedef Copy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Create::Reader {
public:
  typedef Create Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDest() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Create::Builder {
public:
  typedef Create Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getDest();
  inline void setDest( ::uint32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Create::Pipeline {
public:
  typedef Create Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Patch::Reader {
public:
  typedef Patch Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHash() const;
  inline  ::capnp::Data::Reader getHash() const;

  inline  ::uint32_t getLength() const;

  inline bool hasCopyList() const;
  inline  ::capnp::List< ::Copy>::Reader getCopyList() const;

  inline bool hasCreateList() const;
  inline  ::capnp::List< ::Create>::Reader getCreateList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Patch::Builder {
public:
  typedef Patch Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHash();
  inline  ::capnp::Data::Builder getHash();
  inline void setHash( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initHash(unsigned int size);
  inline void adoptHash(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownHash();

  inline  ::uint32_t getLength();
  inline void setLength( ::uint32_t value);

  inline bool hasCopyList();
  inline  ::capnp::List< ::Copy>::Builder getCopyList();
  inline void setCopyList( ::capnp::List< ::Copy>::Reader value);
  inline  ::capnp::List< ::Copy>::Builder initCopyList(unsigned int size);
  inline void adoptCopyList(::capnp::Orphan< ::capnp::List< ::Copy>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Copy>> disownCopyList();

  inline bool hasCreateList();
  inline  ::capnp::List< ::Create>::Builder getCreateList();
  inline void setCreateList( ::capnp::List< ::Create>::Reader value);
  inline  ::capnp::List< ::Create>::Builder initCreateList(unsigned int size);
  inline void adoptCreateList(::capnp::Orphan< ::capnp::List< ::Create>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Create>> disownCreateList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Patch::Pipeline {
public:
  typedef Patch Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t Copy::Reader::getOrigin() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Copy::Builder::getOrigin() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Copy::Builder::setOrigin( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Copy::Reader::getDest() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Copy::Builder::getDest() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Copy::Builder::setDest( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Copy::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Copy::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Copy::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Create::Reader::getDest() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Create::Builder::getDest() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Create::Builder::setDest( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Create::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Create::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Create::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Create::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Create::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Create::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Create::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Create::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Patch::Reader::hasHash() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Patch::Builder::hasHash() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Patch::Reader::getHash() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Patch::Builder::getHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Patch::Builder::setHash( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Patch::Builder::initHash(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Patch::Builder::adoptHash(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Patch::Builder::disownHash() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint32_t Patch::Reader::getLength() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Patch::Builder::getLength() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Patch::Builder::setLength( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Patch::Reader::hasCopyList() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Patch::Builder::hasCopyList() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Copy>::Reader Patch::Reader::getCopyList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Copy>::Builder Patch::Builder::getCopyList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Patch::Builder::setCopyList( ::capnp::List< ::Copy>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Copy>::Builder Patch::Builder::initCopyList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Patch::Builder::adoptCopyList(
    ::capnp::Orphan< ::capnp::List< ::Copy>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Copy>> Patch::Builder::disownCopyList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Copy>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Patch::Reader::hasCreateList() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Patch::Builder::hasCreateList() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Create>::Reader Patch::Reader::getCreateList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Create>::Builder Patch::Builder::getCreateList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Patch::Builder::setCreateList( ::capnp::List< ::Create>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Create>::Builder Patch::Builder::initCreateList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Patch::Builder::adoptCreateList(
    ::capnp::Orphan< ::capnp::List< ::Create>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Create>> Patch::Builder::disownCreateList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Create>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_e196d5513ec00f45_
